pipeline{
    agent any 
    parameters{
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
        choice(name: 'action', choices: ['apply', 'destroy'], description: 'select the action to perform')
    }
    

    environment {
        AWS_ACCESS_KEY_ID   = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_DEFAULT_REGION = 'us-east-1'
    }
    
    stages {
        stage ("checkout from GIT") {
            steps {
                git branch: 'main', url: 'https://github.com/shkr04041996/terraformcode_ecs.git'
            }
        }
        stage ("terraform init") {
            steps {
                sh 'terraform init'
            }
        }
        stage ("terraform fmt") {
            steps {
                sh 'terraform fmt'
            }
        }
        stage ("terraform validate") {
            steps {
                sh 'terraform validate'
            }
        }
        stage ("terrafrom plan") {
            steps {
                sh 'terraform plan -out tfplan'
                sh 'terraform show -no-color tfplan > tfplan.txt'
            }
        }
        stage ("Apply / Destroy") {
            steps {
               script{
                 if(params.action == 'apply') {
                    if(!params.autoApprove){
                       def plan = readFile 'tfplan.txt'
                       input message: "Do you want to apply the plan"
                       parameters : [text(name: 'plan', description: 'please review the plan', defaultValue: plan)]
                    }
                    sh 'terraform ${action} -input=false tfplan'
                 } else if (params.action == 'destroy'){
                    sh 'terraform ${action} --auto-approve'
                 } else {
                     error "Invalid action selected, please choose either 'apply' or 'destroy'."
                 }

                 
               }
            }
        }
    }
}
